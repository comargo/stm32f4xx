cmake_minimum_required(VERSION 2.8)
project(CMSIS)
include(dsp_lib.cmake)
add_library(cmsis_dsp STATIC ${cmsis_dsp_sources} ${cmsis_dsp_headers})
target_include_directories(cmsis_dsp PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/Include)
if(CPU STREQUAL "cortex-m7")
	set(ARM_MATH -DARM_MATH_CM7)
elseif(CPU STREQUAL "cortex-m4")
	set(ARM_MATH -DARM_MATH_CM4)
elseif(CPU STREQUAL "cortex-m3")
	set(ARM_MATH -DARM_MATH_CM3)
elseif(CPU STREQUAL "cortex-m0")
	set(ARM_MATH -DARM_MATH_CM0)
elseif(CPU STREQUAL "cortex-m0plus")
	set(ARM_MATH -DARM_MATH_CM0PLUS)
else()
	message(FATAL_ERROR "Unsupported CPU ${CPU}")
endif()
target_compile_definitions(cmsis_dsp PUBLIC ${ARM_MATH})

set(STM32_PLATFORM "STM32F411xE" CACHE STRING "Target microprocessor platform")
set_property(CACHE STM32_PLATFORM PROPERTY STRINGS 
	STM32F405xx STM32F415xx STM32F407xx STM32F417xx
	STM32F427xx STM32F437xx STM32F429xx STM32F439xx
	STM32F401xC STM32F401xE STM32F410Tx STM32F410Cx
	STM32F410Rx STM32F411xE STM32F446xx STM32F469xx
	STM32F479xx STM32F412Cx STM32F412Zx STM32F412Rx
	STM32F412Vx
)

if(STM32_PLATFORM STREQUAL STM32F405xx)
	set(cmsis_startup stm32f405xx)
elseif(STM32_PLATFORM STREQUAL STM32F415xx)
	set(cmsis_startup stm32f415xx)
elseif(STM32_PLATFORM STREQUAL STM32F407xx)
	set(cmsis_startup stm32f407xx)
elseif(STM32_PLATFORM STREQUAL STM32F417xx)
	set(cmsis_startup stm32f417xx)
elseif(STM32_PLATFORM STREQUAL STM32F427xx)
	set(cmsis_startup stm32f427xx)
elseif(STM32_PLATFORM STREQUAL STM32F437xx)
	set(cmsis_startup stm32f437xx)
elseif(STM32_PLATFORM STREQUAL STM32F429xx)
	set(cmsis_startup stm32f429xx)
elseif(STM32_PLATFORM STREQUAL STM32F439xx)
	set(cmsis_startup stm32f439xx)
elseif(STM32_PLATFORM STREQUAL STM32F401xC)
	set(cmsis_startup stm32f401xc)
elseif(STM32_PLATFORM STREQUAL STM32F401xE)
	set(cmsis_startup stm32f401xe)
elseif(STM32_PLATFORM STREQUAL STM32F410Tx)
	set(cmsis_startup stm32f410tx)
elseif(STM32_PLATFORM STREQUAL STM32F410Cx)
	set(cmsis_startup stm32f410cx)
elseif(STM32_PLATFORM STREQUAL STM32F410Rx)
	set(cmsis_startup stm32f410rx)
elseif(STM32_PLATFORM STREQUAL STM32F411xE)
	set(cmsis_startup stm32f411xe)
elseif(STM32_PLATFORM STREQUAL STM32F446xx)
	set(cmsis_startup stm32f446xx)
elseif(STM32_PLATFORM STREQUAL STM32F469xx)
	set(cmsis_startup stm32f469xx)
elseif(STM32_PLATFORM STREQUAL STM32F479xx)
	set(cmsis_startup stm32f479xx)
elseif(STM32_PLATFORM STREQUAL STM32F412Cx)
	set(cmsis_startup stm32f412cx)
elseif(STM32_PLATFORM STREQUAL STM32F412Zx)
	set(cmsis_startup stm32f412zx)
elseif(STM32_PLATFORM STREQUAL STM32F412Rx)
	set(cmsis_startup stm32f412rx)
elseif(STM32_PLATFORM STREQUAL STM32F412Vx)
	set(cmsis_startup stm32f412vx)
endif()

enable_language(ASM)
add_library(cmsis STATIC Device/ST/STM32F4xx/Source/Templates/gcc/startup_${cmsis_startup}.s Device/ST/STM32F4xx/Source/Templates/system_stm32f4xx.c)
target_compile_definitions(cmsis PUBLIC -D${STM32_PLATFORM})
target_include_directories(cmsis PUBLIC 
	${CMAKE_CURRENT_SOURCE_DIR}/Device/ST/STM32F4xx/Include
	${CMAKE_CURRENT_SOURCE_DIR}/Include
)
